import streamlit as st

def show_information_block(info_type):
    if info_type == "basic_info":
        st.write("""
        Les formats d'images accept√©s sont : **_jpg_**, **_png_** ou **_jpeg_**
        
        En choisissant vous-m√™me, veillez √† choisir une image qui
        est 'similaire' aux images du dataset initial et sur lesquelles nos mod√®les ont √©t√© form√©s. 
        
        Si la plante est √† un stade de croissance relativement avanc√©, par exemple, cela ne marchera pas
        car le mod√®le a √©t√© entra√Æn√© sur des semis et jeunes plants.
        """)
        col1, col2 = st.columns([1,1])
        with col1:
            st.image('src/streamlit/fichiers/mauvaise_blackgrass.png', caption="üõë Exemple d'image que le mod√®le n'a jamais vu")
        with col2:
            st.image('src/streamlit/fichiers/bonne_blackgrass.png', caption="‚úÖ Image qui peut fonctionner")
        st.write("""
        
        De m√™me, privil√©giez les images prises sur le dessus et non sur la coupe, ici encore, nos mod√®les ayant
        √©t√© entra√Æn√©s sur des images prises d'une certaine mani√®re et sur seulement 5536 images...
        """)
        col1, col2 = st.columns([1,1])
        with col1:
            st.image('src/streamlit/fichiers/mais_1.png', caption="üõë Exemple d'image qui perturbe le mod√®le")
        with col2:
            st.image('src/streamlit/fichiers/mais_2.png', caption="‚úÖ Image qui fonctionne √† 99,99%")
        
    elif info_type == "image_url":
        mais_1 = 'src/streamlit/fichiers/mais_1.png'
        mais_2 = 'src/streamlit/fichiers/mais_2.png'
        mauvaise_blackgrass = 'src/streamlit/fichiers/mauvaise_blackgrass.png'
        bonne_blackgrass = 'src/streamlit/fichiers/bonne_blackgrass.png'
        st.write("""
        L'url doit √™tre celui d'une image et avoir la structure suivante : 
        [https://siteweb.com/mon-image.jpg](#)
        Les formats d'images accept√©s sont : **_jpg_**, **_png_** ou **_jpeg_**
        
        En choissant vous m√™me une image sur internet, veillez √† choisir une image qui
        est 'similaire' aux images du dataset initial et sur lesquelles nos mod√®les ont √©t√© form√©s. 
        
        Si la plante est √† un stade de croissance relativement avanc√©, par exemple, cela ne marchera pas
        car le mod√®le a √©t√© entrain√© semis et jeunes plants.           
        """)
        col1, col2= st.columns([1,1])
        with col1 : 
            st.image(mauvaise_blackgrass, caption="üõë Exemple d'image que le mod√®le n'a jamais vu")
        with col2 : 
            st.image(bonne_blackgrass, caption="‚úÖ Image qui peut fonctionner")
        st.write("""

        De m√™me, privilegiez les images prise sur le dessus et pas sur la coupe, ici encore, nos mod√®les ayant
        √©t√© entrain√©s sur des images prises d'une certaines mani√®re et sur seulement 5536 images ... 
        
        """)
        col1, col2= st.columns([1,1])
        with col1 : 
            st.image(mais_1, caption="üõë Exemple d'image qui perturbe le mod√®le")
        with col2 : 
            st.image(mais_2, caption="‚úÖ Image qui fonctionne √† 99,99%")

    elif info_type == "gallery_info":
        st.markdown(""" 
        - D'o√π proviennent ces images ? 
            - Elles ont compos√© l'ensemble de Test, elles ont √©t√© s√©par√©es du Dataset original et le mod√®le n'a pas √©t√© entra√Æn√© sur ces images. 
            Un Random State fixe a √©t√© d√©fini, de sorte √† ce que les images des ensembles Train, Val et Test soient toujours les m√™mes. 
        - Pourquoi fournir ces images ? 
            - Pour montrer que le mod√®le fonctionne lorsqu'on lui fournit des images ayant des similarit√©s avec celles sur lesquelles il a √©t√© entra√Æn√©. 
        - Pour se rep√©rer et comparer la classe de l'image avec la pr√©diction, il suffit de regarder le nom du fichier, qui n'impacte pas la pr√©diction du mod√®le. 
        """)

    else:
        st.error("Type d'information non reconnu.")


code_CNN = """
Conv2D(32, (6, 6), activation='relu', padding='same', kernel_regularizer=l2(0.001), input_shape=(150, 150, 3)),
BatchNormalization(),
MaxPooling2D(2, 2),

Conv2D(64, (5, 5), activation='relu', padding='same', kernel_regularizer=l2(0.001)),
BatchNormalization(),
MaxPooling2D(2, 2),

Conv2D(128, (4, 4), activation='relu', padding='same', kernel_regularizer=l2(0.001)),
BatchNormalization(),
MaxPooling2D(2, 2),

Conv2D(256, (3, 3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),
BatchNormalization(),
MaxPooling2D(2, 2),

Flatten(),

Dense(512, activation='relu', kernel_regularizer=l2(0.001)),
Dropout(0.5),

Dense(12, activation='softmax')
"""


